# Generated by Django 5.2.3 on 2025-06-26 15:33

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ExerciseLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('location_type', models.CharField(choices=[('gym', '헬스장'), ('yoga', '요가원'), ('pilates', '필라테스'), ('crossfit', '크로스핏'), ('swimming', '수영장'), ('martial_arts', '무술도장'), ('dance', '댄스학원'), ('other', '기타')], max_length=20)),
                ('address', models.CharField(max_length=200)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('website', models.URLField(blank=True)),
                ('operating_hours', models.JSONField(default=dict, help_text='운영 시간')),
                ('rating', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('review_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': '운동 장소',
                'verbose_name_plural': '운동 장소들',
                'db_table': 'exercise_locations',
            },
        ),
        migrations.CreateModel(
            name='MusicRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('artist', models.CharField(max_length=100)),
                ('album', models.CharField(blank=True, max_length=200)),
                ('spotify_id', models.CharField(blank=True, max_length=50)),
                ('preview_url', models.URLField(blank=True)),
                ('workout_type', models.CharField(choices=[('cardio', '유산소'), ('strength', '근력운동'), ('yoga', '요가'), ('stretching', '스트레칭'), ('hiit', 'HIIT'), ('running', '러닝')], max_length=20)),
                ('bpm', models.IntegerField(blank=True, help_text='Beats per minute', null=True)),
                ('energy_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '음악 추천',
                'verbose_name_plural': '음악 추천들',
                'db_table': 'music_recommendations',
            },
        ),
        migrations.CreateModel(
            name='WorkoutCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='아이콘 클래스명', max_length=50)),
            ],
            options={
                'verbose_name': '운동 카테고리',
                'verbose_name_plural': '운동 카테고리들',
                'db_table': 'workout_categories',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '사용자',
                'verbose_name_plural': '사용자들',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ChatSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_session_number', models.IntegerField(default=1, help_text='사용자별 세션 번호')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('summary', models.TextField(blank=True, help_text='세션 대화 요약')),
                ('extracted_preferences', models.JSONField(default=dict, help_text='추출된 선호도 정보')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '챗봇 세션',
                'verbose_name_plural': '챗봇 세션들',
                'db_table': 'chat_sessions',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sender', models.CharField(choices=[('user', '사용자'), ('bot', '챗봇')], max_length=10)),
                ('message', models.TextField()),
                ('context', models.JSONField(blank=True, help_text='대화 컨텍스트', null=True)),
                ('embedding', models.JSONField(blank=True, help_text='메시지 임베딩', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_messages', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.chatsession')),
            ],
            options={
                'verbose_name': '챗봇 메시지',
                'verbose_name_plural': '챗봇 메시지들',
                'db_table': 'chat_messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='MusicPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_genres', models.JSONField(default=list, help_text='선호 장르 목록')),
                ('preferred_artists', models.JSONField(default=list, help_text='선호 아티스트 목록')),
                ('disliked_genres', models.JSONField(default=list, help_text='비선호 장르 목록')),
                ('workout_music_preferences', models.JSONField(default=dict, help_text='운동 종류별 음악 선호도')),
                ('preferred_bpm_min', models.IntegerField(default=100, help_text='선호 BPM 최소값')),
                ('preferred_bpm_max', models.IntegerField(default=180, help_text='선호 BPM 최대값')),
                ('mood_preferences', models.JSONField(default=dict, help_text='기분별 음악 선호도')),
                ('feedback_history', models.JSONField(default=list, help_text='피드백 기록')),
                ('recommendation_accuracy', models.FloatField(default=0.0, help_text='추천 정확도')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='music_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '음악 선호도',
                'verbose_name_plural': '음악 선호도들',
                'db_table': 'music_preferences',
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('workout_reminder', '운동 알림'), ('goal_achievement', '목표 달성'), ('social_activity', '친구 활동'), ('weekly_summary', '주간 요약')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('body', models.TextField()),
                ('status', models.CharField(choices=[('sent', '전송됨'), ('failed', '전송 실패'), ('pending', '대기중')], default='pending', max_length=10)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('fcm_message_id', models.CharField(blank=True, max_length=100, null=True)),
                ('fcm_response', models.JSONField(blank=True, null=True)),
                ('data', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '알림 기록',
                'verbose_name_plural': '알림 기록',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fcm_token', models.TextField(blank=True, null=True)),
                ('fcm_token_updated_at', models.DateTimeField(auto_now=True)),
                ('enable_workout_reminders', models.BooleanField(default=True)),
                ('enable_goal_achievement_notif', models.BooleanField(default=True)),
                ('enable_social_activity_notif', models.BooleanField(default=True)),
                ('enable_weekly_summary', models.BooleanField(default=True)),
                ('reminder_time', models.TimeField(default='09:00', help_text='운동 알림을 받을 시간')),
                ('reminder_days', models.CharField(default='1,2,3,4,5', help_text='알림을 받을 요일 (0=일요일, 6=토요일)', max_length=20)),
                ('quiet_hours_start', models.TimeField(default='22:00', help_text='알림을 받지 않을 시간 시작')),
                ('quiet_hours_end', models.TimeField(default='07:00', help_text='알림을 받지 않을 시간 종료')),
                ('notification_language', models.CharField(choices=[('ko', '한국어'), ('en', 'English')], default='ko', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '알림 설정',
                'verbose_name_plural': '알림 설정',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(120)])),
                ('height', models.FloatField(help_text='cm 단위', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(300)])),
                ('weight', models.FloatField(help_text='kg 단위', validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(500)])),
                ('gender', models.CharField(choices=[('M', '남성'), ('F', '여성'), ('O', '기타')], default='O', max_length=1)),
                ('exercise_experience', models.CharField(choices=[('beginner', '초급자 (1년 미만)'), ('intermediate', '중급자 (1-3년)'), ('advanced', '상급자 (3-5년)'), ('expert', '전문가 (5년 이상)')], default='beginner', max_length=20)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images/')),
                ('diseases', models.JSONField(default=list, help_text='질병 목록')),
                ('allergies', models.JSONField(default=list, help_text='알레르기 목록')),
                ('preferred_exercises', models.JSONField(default=list, help_text='선호하는 운동 목록')),
                ('preferred_foods', models.JSONField(default=list, help_text='선호하는 음식 목록')),
                ('disliked_exercises', models.JSONField(default=list, help_text='싫어하는 운동 목록')),
                ('disliked_foods', models.JSONField(default=list, help_text='싫어하는 음식 목록')),
                ('goal', models.CharField(choices=[('weight_loss', '체중 감량'), ('muscle_gain', '근육 증가'), ('health_improvement', '건강 개선'), ('endurance', '지구력 향상'), ('flexibility', '유연성 향상'), ('stress_relief', '스트레스 해소'), ('custom', '사용자 정의')], default='health_improvement', max_length=20)),
                ('custom_goal', models.TextField(blank=True, help_text='사용자 정의 목표')),
                ('workout_days_per_week', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('weight_unit', models.CharField(choices=[('kg', 'kg'), ('lbs', 'lbs')], default='kg', max_length=5)),
                ('distance_unit', models.CharField(choices=[('km', 'km'), ('miles', 'miles')], default='km', max_length=5)),
                ('weekly_workout_goal', models.IntegerField(default=3, help_text='주간 운동 목표 횟수')),
                ('monthly_distance_goal', models.FloatField(default=50.0, help_text='월간 목표 거리 (km 또는 miles)')),
                ('monthly_calories_goal', models.IntegerField(default=8000, help_text='월간 목표 칼로리 소모량')),
                ('daily_steps_goal', models.IntegerField(default=10000, help_text='일일 목표 걸음 수')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '사용자 프로필',
                'verbose_name_plural': '사용자 프로필들',
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='VectorizedChatHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sessions', models.JSONField(default=list, help_text='벡터화된 세션 ID 목록')),
                ('embedding', models.JSONField(help_text='대화 내용의 통합 임베딩')),
                ('summary', models.TextField(help_text='대화 내용 요약')),
                ('message_count', models.IntegerField(help_text='벡터화된 메시지 수')),
                ('date_range_start', models.DateTimeField(help_text='가장 오래된 메시지 시간')),
                ('date_range_end', models.DateTimeField(help_text='가장 최근 메시지 시간')),
                ('topics', models.JSONField(default=list, help_text='대화 주제들')),
                ('preferences', models.JSONField(default=dict, help_text='추출된 선호도 정보')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vectorized_chats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '벡터화된 대화 기록',
                'verbose_name_plural': '벡터화된 대화 기록들',
                'db_table': 'vectorized_chat_history',
                'ordering': ['-date_range_end'],
            },
        ),
        migrations.CreateModel(
            name='WorkoutLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('duration', models.IntegerField(help_text='분 단위')),
                ('calories_burned', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('workout_name', models.CharField(max_length=100)),
                ('workout_type', models.CharField(choices=[('running', '러닝'), ('cycling', '자전거'), ('swimming', '수영'), ('gym', '헬스장'), ('yoga', '요가'), ('pilates', '필라테스'), ('hiking', '등산'), ('sports', '스포츠'), ('home', '홈트레이닝'), ('other', '기타')], default='other', max_length=20)),
                ('sets', models.IntegerField(blank=True, null=True)),
                ('reps', models.IntegerField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, help_text='kg 단위', null=True)),
                ('start_latitude', models.FloatField(blank=True, null=True)),
                ('start_longitude', models.FloatField(blank=True, null=True)),
                ('end_latitude', models.FloatField(blank=True, null=True)),
                ('end_longitude', models.FloatField(blank=True, null=True)),
                ('route_coordinates', models.JSONField(default=list, help_text='경로 좌표 목록')),
                ('distance', models.FloatField(blank=True, help_text='이동 거리 (km)', null=True)),
                ('avg_heart_rate', models.IntegerField(blank=True, help_text='평균 심박수', null=True)),
                ('max_heart_rate', models.IntegerField(blank=True, help_text='최대 심박수', null=True)),
                ('steps', models.IntegerField(blank=True, help_text='걸음 수', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workout_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '운동 기록',
                'verbose_name_plural': '운동 기록들',
                'db_table': 'workout_logs',
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkoutMusic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('artist', models.CharField(max_length=100)),
                ('youtube_id', models.CharField(blank=True, max_length=50)),
                ('spotify_id', models.CharField(blank=True, max_length=50)),
                ('played_at', models.DateTimeField(auto_now_add=True)),
                ('play_duration', models.IntegerField(help_text='재생 시간 (초)')),
                ('skip_count', models.IntegerField(default=0, help_text='건너뛰기 횟수')),
                ('user_feedback', models.CharField(blank=True, choices=[('liked', '좋음'), ('disliked', '싫음'), ('neutral', '보통')], max_length=10, null=True)),
                ('feedback_note', models.TextField(blank=True)),
                ('was_ai_recommended', models.BooleanField(default=False)),
                ('recommendation_reason', models.TextField(blank=True)),
                ('recommendation_keywords', models.JSONField(default=list, help_text='AI 추천 키워드')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workout_music', to=settings.AUTH_USER_MODEL)),
                ('workout_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='played_music', to='core.workoutlog')),
            ],
            options={
                'verbose_name': '운동 중 재생 음악',
                'verbose_name_plural': '운동 중 재생 음악들',
                'db_table': 'workout_music',
                'ordering': ['-played_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkoutVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('youtube_id', models.CharField(max_length=50, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('thumbnail_url', models.URLField()),
                ('duration', models.IntegerField(help_text='초 단위')),
                ('difficulty', models.CharField(choices=[('beginner', '초급'), ('intermediate', '중급'), ('advanced', '상급')], max_length=20)),
                ('target_muscles', models.JSONField(default=list, help_text='타겟 근육 목록')),
                ('view_count', models.IntegerField(default=0)),
                ('like_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='core.workoutcategory')),
            ],
            options={
                'verbose_name': '운동 영상',
                'verbose_name_plural': '운동 영상들',
                'db_table': 'workout_videos',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='workoutlog',
            name='video',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.workoutvideo'),
        ),
        migrations.CreateModel(
            name='DailyRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('type', models.CharField(choices=[('workout', '운동'), ('diet', '식단')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('details', models.JSONField(help_text='추천 상세 정보')),
                ('reasoning', models.TextField(help_text='추천 이유')),
                ('based_on', models.JSONField(default=dict, help_text='추천 근거 데이터')),
                ('is_accepted', models.BooleanField(blank=True, null=True)),
                ('user_feedback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '일일 추천',
                'verbose_name_plural': '일일 추천들',
                'db_table': 'daily_recommendations',
                'ordering': ['-date', '-created_at'],
                'unique_together': {('user', 'date', 'type')},
            },
        ),
        migrations.CreateModel(
            name='DietLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('meal_type', models.CharField(choices=[('breakfast', '아침'), ('lunch', '점심'), ('dinner', '저녁'), ('snack', '간식')], max_length=20)),
                ('food_items', models.JSONField(default=list, help_text='음식 항목 목록')),
                ('total_calories', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('protein', models.FloatField(blank=True, help_text='단백질(g)', null=True)),
                ('carbohydrates', models.FloatField(blank=True, help_text='탄수화물(g)', null=True)),
                ('fat', models.FloatField(blank=True, help_text='지방(g)', null=True)),
                ('fiber', models.FloatField(blank=True, help_text='식이섬유(g)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diet_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '식단 기록',
                'verbose_name_plural': '식단 기록들',
                'db_table': 'diet_logs',
                'ordering': ['-date', '-created_at'],
                'unique_together': {('user', 'date', 'meal_type')},
            },
        ),
    ]
