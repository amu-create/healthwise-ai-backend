# Generated by Django - Elite Exercise Data Migration

from django.db import migrations
import json


def add_elite_exercises(apps, schema_editor):
    Exercise = apps.get_model('pose_analysis', 'Exercise')
    
    # 기존 운동 업데이트 및 새로운 엘리트 운동 추가
    elite_exercises = [
        {
            'name': '스쿼트',
            'name_en': 'squat',
            'category': 'lower',
            'difficulty': 'beginner',
            'description': '하체 근력의 기본이 되는 운동. 대퇴사두근, 둔근, 햄스트링을 종합적으로 발달시킵니다.',
            'target_muscles': ['대퇴사두근', '둔근', '햄스트링', '종아리', '코어'],
            'angle_calculations': {
                'spine_angle': {'points': ['shoulder', 'hip', 'knee'], 'ideal': 5, 'tolerance': 10},
                'knee_angle': {'points': ['hip', 'knee', 'ankle'], 'ideal': 90, 'tolerance': 15},
                'hip_angle': {'points': ['shoulder', 'hip', 'knee'], 'ideal': 90, 'tolerance': 20}
            },
            'key_points': [
                '발을 어깨 너비로 벌리고 발끝은 약간 바깥쪽으로',
                '가슴을 펴고 시선은 정면 또는 약간 위로',
                '엉덩이를 뒤로 빼면서 무릎을 굽힙니다',
                '무릎이 발끝을 넘지 않도록 주의',
                '허벅지가 바닥과 평행이 될 때까지 하강',
                '발뒤꿈치로 바닥을 밀어 일어납니다'
            ],
            'icon': '🏋️'
        },
        {
            'name': '데드리프트',
            'name_en': 'deadlift',
            'category': 'fullbody',
            'difficulty': 'intermediate',
            'description': '전신 근력의 왕. 척추기립근, 둔근, 햄스트링을 중심으로 전신을 단련합니다.',
            'target_muscles': ['햄스트링', '둔근', '척추기립근', '광배근', '승모근', '전완근'],
            'angle_calculations': {
                'spine_neutrality': {'points': ['shoulder', 'hip', 'knee'], 'ideal': 0, 'tolerance': 5},
                'hip_hinge': {'points': ['shoulder', 'hip', 'knee'], 'ideal': 45, 'tolerance': 15},
                'bar_path': {'type': 'vertical_deviation', 'ideal': 0, 'tolerance': 5}
            },
            'key_points': [
                '발을 엉덩이 너비로 벌리고 바벨 아래 서기',
                '무릎을 살짝 굽히고 엉덩이를 뒤로 빼며 상체 숙이기',
                '등을 곧게 펴고 가슴을 열어 척추 중립 유지',
                '바벨을 정강이에 가깝게 유지하며 들어올리기',
                '엉덩이와 무릎을 동시에 펴며 일어서기',
                '정점에서 엉덩이를 앞으로 밀어 락아웃'
            ],
            'icon': '💪'
        },
        {
            'name': '오버헤드프레스',
            'name_en': 'overhead_press',
            'category': 'upper',
            'difficulty': 'intermediate',
            'description': '어깨 근력의 핵심. 전면 삼각근과 측면 삼각근을 집중적으로 발달시킵니다.',
            'target_muscles': ['전면삼각근', '측면삼각근', '삼두근', '코어', '상부승모근'],
            'angle_calculations': {
                'lumbar_extension': {'points': ['hip', 'shoulder'], 'ideal': 0, 'tolerance': 10},
                'elbow_flare': {'type': 'frontal_plane', 'ideal': 45, 'tolerance': 15},
                'bar_path': {'type': 'vertical', 'ideal': 90, 'tolerance': 5}
            },
            'key_points': [
                '바벨을 쇄골 높이에서 잡고 팔꿈치를 약간 앞으로',
                '코어를 단단히 조이고 엉덩이에 힘주기',
                '바벨을 턱을 스치며 수직으로 밀어올리기',
                '팔꿈치를 완전히 펴며 머리 위로 프레스',
                '허리가 과도하게 젖혀지지 않도록 주의',
                '천천히 시작 위치로 내리기'
            ],
            'icon': '🏋️‍♂️'
        },
        {
            'name': '벤치프레스',
            'name_en': 'bench_press',
            'category': 'upper',
            'difficulty': 'beginner',
            'description': '가슴 근육 발달의 기본. 대흉근, 삼두근, 전면삼각근을 종합적으로 단련합니다.',
            'target_muscles': ['대흉근', '삼두근', '전면삼각근'],
            'angle_calculations': {
                'elbow_angle': {'type': 'torso_relative', 'ideal': 75, 'tolerance': 15},
                'wrist_angle': {'points': ['elbow', 'wrist', 'index'], 'ideal': 180, 'tolerance': 30},
                'bar_touch': {'type': 'chest_position', 'ideal': 'mid_chest', 'tolerance': 10}
            },
            'key_points': [
                '벤치에 누워 견갑골을 모으고 아래로 당기기',
                '적절한 아치를 만들어 안정적인 자세 유지',
                '바벨을 어깨보다 약간 넓게 잡기',
                '바벨을 가슴 중앙으로 천천히 내리기',
                '팔꿈치를 45-75도 각도로 유지',
                '가슴 근육으로 바벨을 밀어올리기'
            ],
            'icon': '🏋️'
        },
        {
            'name': '플랭크',
            'name_en': 'plank',
            'category': 'core',
            'difficulty': 'beginner',
            'description': '코어 안정성의 기초. 복직근, 복횡근, 복사근을 포함한 전체 코어를 강화합니다.',
            'target_muscles': ['복직근', '복횡근', '복사근', '둔근', '척추기립근'],
            'angle_calculations': {
                'body_alignment': {'points': ['shoulder', 'hip', 'ankle'], 'ideal': 180, 'tolerance': 10},
                'hip_height': {'type': 'relative_position', 'ideal': 'neutral', 'tolerance': 5},
                'head_position': {'points': ['ear', 'shoulder', 'hip'], 'ideal': 180, 'tolerance': 15}
            },
            'key_points': [
                '팔꿈치를 어깨 바로 아래 위치',
                '머리부터 발끝까지 일직선 유지',
                '복부와 둔근에 힘을 주어 골반 안정화',
                '목은 척추와 일직선으로 유지',
                '호흡을 일정하게 유지하며 버티기',
                '엉덩이가 처지거나 올라가지 않도록 주의'
            ],
            'icon': '🧘'
        },
        {
            'name': '푸쉬업',
            'name_en': 'pushup',
            'category': 'upper',
            'difficulty': 'beginner',
            'description': '상체 근력의 기본. 체중을 이용해 가슴, 어깨, 삼두근을 단련합니다.',
            'target_muscles': ['대흉근', '삼두근', '전면삼각근', '코어'],
            'angle_calculations': {
                'elbow_angle': {'points': ['shoulder', 'elbow', 'wrist'], 'ideal': 90, 'tolerance': 20},
                'body_angle': {'points': ['shoulder', 'hip', 'ankle'], 'ideal': 180, 'tolerance': 15}
            },
            'key_points': [
                '손을 어깨보다 약간 넓게 벌려 바닥에 대기',
                '머리부터 발끝까지 일직선 유지',
                '가슴이 바닥에 거의 닿을 때까지 팔꿈치 굽히기',
                '팔꿈치를 45도 각도로 유지',
                '가슴 근육으로 바닥을 밀어 올라오기'
            ],
            'icon': '💪'
        },
        {
            'name': '런지',
            'name_en': 'lunge',
            'category': 'lower',
            'difficulty': 'beginner',
            'description': '하체 균형과 근력을 동시에. 한쪽 다리씩 집중적으로 단련합니다.',
            'target_muscles': ['대퇴사두근', '둔근', '햄스트링', '종아리'],
            'angle_calculations': {
                'front_knee': {'points': ['hip', 'knee', 'ankle'], 'ideal': 90, 'tolerance': 15},
                'back_knee': {'points': ['hip', 'knee', 'ankle'], 'ideal': 90, 'tolerance': 20}
            },
            'key_points': [
                '한 발을 크게 앞으로 내딛기',
                '앞쪽 무릎을 90도로 굽히며 하강',
                '뒤쪽 무릎이 바닥에 거의 닿을 정도로 내리기',
                '상체는 곧게 세운 상태 유지',
                '앞쪽 발뒤꿈치로 밀어 일어나기'
            ],
            'icon': '🦵'
        },
        {
            'name': '버피',
            'name_en': 'burpee',
            'category': 'fullbody',
            'difficulty': 'advanced',
            'description': '전신 컨디셔닝의 왕. 근력, 심폐지구력, 민첩성을 동시에 향상시킵니다.',
            'target_muscles': ['전신'],
            'angle_calculations': {
                'dynamic_phases': True,
                'squat_phase': {'points': ['hip', 'knee', 'ankle'], 'ideal': 90},
                'plank_phase': {'points': ['shoulder', 'hip', 'ankle'], 'ideal': 180}
            },
            'key_points': [
                '서있는 자세에서 시작',
                '스쿼트 자세로 앉으며 손을 바닥에',
                '다리를 뒤로 뻗어 플랭크 자세',
                '푸쉬업 1회 실시',
                '다리를 당겨 스쿼트 자세로',
                '폭발적으로 점프하며 일어서기'
            ],
            'icon': '🔥'
        }
    ]
    
    for exercise_data in elite_exercises:
        try:
            # update_or_create 대신 먼저 존재 여부 확인
            exercise = Exercise.objects.filter(name_en=exercise_data['name_en']).first()
            
            if exercise:
                # 기존 운동 업데이트
                for key, value in exercise_data.items():
                    setattr(exercise, key, value)
                exercise.save()
                print(f"Updated exercise: {exercise_data['name']}")
            else:
                # 새로운 운동 생성 (ID 자동 할당)
                Exercise.objects.create(**exercise_data)
                print(f"Created new exercise: {exercise_data['name']}")
                
        except Exception as e:
            print(f"Error processing exercise {exercise_data['name']}: {str(e)}")
            # 오류가 발생해도 다음 운동 처리 계속


def reverse_elite_exercises(apps, schema_editor):
    Exercise = apps.get_model('pose_analysis', 'Exercise')
    # 삭제는 하지 않고 로그만 출력
    exercise_names = ['squat', 'deadlift', 'overhead_press', 'bench_press', 'plank', 'pushup', 'lunge', 'burpee']
    print(f"Reverse migration called for exercises: {exercise_names}")


class Migration(migrations.Migration):

    dependencies = [
        ('pose_analysis', '0001_initial'),  # 실제 마이그레이션 파일명으로 수정 필요
    ]

    operations = [
        migrations.RunPython(add_elite_exercises, reverse_elite_exercises),
    ]
